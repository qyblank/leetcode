package code;

/*代码
        测试用例
        测试结果
        测试结果
        238. 除自身以外数组的乘积
        中等
        相关标签
        相关企业
        提示
        给你一个整数数组 nums，返回 数组 answer ，其中 answer[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积 。

        题目数据 保证 数组 nums之中任意元素的全部前缀元素和后缀的乘积都在  32 位 整数范围内。

        请 不要使用除法，且在 O(n) 时间复杂度内完成此题。



        示例 1:

        输入: nums = [1,2,3,4]
        输出: [24,12,8,6]
        示例 2:

        输入: nums = [-1,1,0,-3,3]
        输出: [0,0,9,0,0]


        提示：

        2 <= nums.length <= 105
        -30 <= nums[i] <= 30
        保证 数组 nums之中任意元素的全部前缀元素和后缀的乘积都在  32 位 整数范围内


        进阶：你可以在 O(1) 的额外空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组 不被视为 额外空间。）*/
public class 除自身以外数组的乘积 {
/*    方法二：空间复杂度 O(1) 的方法
    思路

    尽管上面的方法已经能够很好的解决这个问题，但是空间复杂度并不为常数。

    由于输出数组不算在空间复杂度内，那么我们可以将 L 或 R 数组用输出数组来计算。先把输出数组当作 L 数组来计算，然后再动态构造 R 数组得到结果。让我们来看看基于这个思想的算法。

    算法

    初始化 answer 数组，对于给定索引 i，answer[i] 代表的是 i 左侧所有数字的乘积。
    构造方式与之前相同，只是我们试图节省空间，先把 answer 作为方法一的 L 数组。
    这种方法的唯一变化就是我们没有构造 R 数组。而是用一个遍历来跟踪右边元素的乘积。并更新数组 answer[i]=answer[i]∗R。然后 R 更新为 R=R∗nums[i]，其中变量 R 表示的就是索引右侧数字的乘积。

    作者：力扣官方题解
    链接：https://leetcode.cn/problems/product-of-array-except-self/solutions/272369/chu-zi-shen-yi-wai-shu-zu-de-cheng-ji-by-leetcode-/
    来源：力扣（LeetCode）
    著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。*/
}
